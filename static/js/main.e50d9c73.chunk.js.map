{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isStarted","setIsStarted","isReversed","setIsReversed","None","sortBy","setSortBy","visibleGoods","sort","firstGood","secondGood","Alpabet","localeCompare","Length","length","reverse","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"wJAiBKA,E,4CAbCC,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,kBAAAA,E,gBAAAA,E,mBAAAA,M,KAOE,IAAME,EAAU,WACrB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA4BJ,mBAASH,EAASQ,MAA9C,mBAAOC,EAAP,KAAeC,EAAf,KAEMC,EAAY,UAAOV,GAiBzB,OAfAU,EAAaC,MAAK,SAACC,EAAWC,GAC5B,OAAQL,GACN,KAAKT,EAASe,QACZ,OAAOF,EAAUG,cAAcF,GACjC,KAAKd,EAASiB,OACZ,OAAOJ,EAAUK,OAASJ,EAAWI,OACvC,QACE,OAAO,MAITZ,GACFK,EAAaQ,UAIb,qBAAKC,UAAU,MAAf,SACIhB,EAWE,qCACE,sBAAKgB,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAU,2BACVE,QAAS,kBAAMZ,EAAUV,EAASe,UAHpC,iCAQA,wBACEM,KAAK,SACLD,UAAU,8BACVE,QAAS,kBAAMZ,EAAUV,EAASiB,SAHpC,4BAQA,wBACEI,KAAK,SACLD,UAAU,sCACVE,QAAS,kBAAMf,GAAeD,IAHhC,qBAQA,wBACEe,KAAK,SACLD,UAAU,6BACVE,QAAS,WACPf,GAAc,GACdG,EAAUV,EAASQ,OALvB,sBAYF,oBAAIY,UAAU,OAAd,SACGT,EAAaY,KAAI,SAAAC,GAAI,OACpB,oBACEJ,UAAU,gCADZ,SAIGI,GAFIA,WAnDb,wBACEH,KAAK,SACLD,UAAU,2CACVE,QAAS,kBAAMjB,GAAcD,IAH/B,sBC/CVqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.e50d9c73.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { FC, useState } from 'react';\nimport './App.css';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  None = 'none',\n  Alpabet = 'alpabet',\n  Length = 'length',\n  Reverse = 'reverse',\n}\n\nexport const App: FC = () => {\n  const [isStarted, setIsStarted] = useState(false);\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortBy, setSortBy] = useState(SortType.None);\n\n  const visibleGoods = [...goodsFromServer];\n\n  visibleGoods.sort((firstGood, secondGood) => {\n    switch (sortBy) {\n      case SortType.Alpabet:\n        return firstGood.localeCompare(secondGood);\n      case SortType.Length:\n        return firstGood.length - secondGood.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return (\n    <div className=\"App\">\n      {!isStarted\n        ? (\n          <button\n            type=\"button\"\n            className=\"button button__start is-large is-primary\"\n            onClick={() => setIsStarted(!isStarted)}\n          >\n            Start\n          </button>\n        )\n        : (\n          <>\n            <div className=\"buttons\">\n              <button\n                type=\"button\"\n                className=\"button is-medium is-info\"\n                onClick={() => setSortBy(SortType.Alpabet)}\n              >\n                Sort alphabetically\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button is-medium is-warning\"\n                onClick={() => setSortBy(SortType.Length)}\n              >\n                Sort by length\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button is-medium is-danger is-light\"\n                onClick={() => setIsReversed(!isReversed)}\n              >\n                Reverse\n              </button>\n\n              <button\n                type=\"button\"\n                className=\"button is-medium is-danger\"\n                onClick={() => {\n                  setIsReversed(false);\n                  setSortBy(SortType.None);\n                }}\n              >\n                Reset\n              </button>\n            </div>\n\n            <ul className=\"tags\">\n              {visibleGoods.map(good => (\n                <li\n                  className=\"tag is-info is-light is-large\"\n                  key={good}\n                >\n                  {good}\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}